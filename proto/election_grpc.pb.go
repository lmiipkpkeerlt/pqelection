// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/election.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BulletinBoardClient is the client API for BulletinBoard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BulletinBoardClient interface {
	Setup(ctx context.Context, in *SetupRequest, opts ...grpc.CallOption) (*SetupReply, error)
	Register(ctx context.Context, opts ...grpc.CallOption) (BulletinBoard_RegisterClient, error)
	Vote(ctx context.Context, in *Ballot, opts ...grpc.CallOption) (*VoteReply, error)
	GetParameters(ctx context.Context, in *ParameterRequest, opts ...grpc.CallOption) (*ParameterReply, error)
	GetCommit(ctx context.Context, in *GetCommitRequest, opts ...grpc.CallOption) (*Commit, error)
	GetBallots(ctx context.Context, in *BallotsRequest, opts ...grpc.CallOption) (BulletinBoard_GetBallotsClient, error)
}

type bulletinBoardClient struct {
	cc grpc.ClientConnInterface
}

func NewBulletinBoardClient(cc grpc.ClientConnInterface) BulletinBoardClient {
	return &bulletinBoardClient{cc}
}

func (c *bulletinBoardClient) Setup(ctx context.Context, in *SetupRequest, opts ...grpc.CallOption) (*SetupReply, error) {
	out := new(SetupReply)
	err := c.cc.Invoke(ctx, "/proto.BulletinBoard/Setup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulletinBoardClient) Register(ctx context.Context, opts ...grpc.CallOption) (BulletinBoard_RegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &BulletinBoard_ServiceDesc.Streams[0], "/proto.BulletinBoard/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &bulletinBoardRegisterClient{stream}
	return x, nil
}

type BulletinBoard_RegisterClient interface {
	Send(*Commit) error
	CloseAndRecv() (*RegisterReply, error)
	grpc.ClientStream
}

type bulletinBoardRegisterClient struct {
	grpc.ClientStream
}

func (x *bulletinBoardRegisterClient) Send(m *Commit) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bulletinBoardRegisterClient) CloseAndRecv() (*RegisterReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RegisterReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bulletinBoardClient) Vote(ctx context.Context, in *Ballot, opts ...grpc.CallOption) (*VoteReply, error) {
	out := new(VoteReply)
	err := c.cc.Invoke(ctx, "/proto.BulletinBoard/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulletinBoardClient) GetParameters(ctx context.Context, in *ParameterRequest, opts ...grpc.CallOption) (*ParameterReply, error) {
	out := new(ParameterReply)
	err := c.cc.Invoke(ctx, "/proto.BulletinBoard/GetParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulletinBoardClient) GetCommit(ctx context.Context, in *GetCommitRequest, opts ...grpc.CallOption) (*Commit, error) {
	out := new(Commit)
	err := c.cc.Invoke(ctx, "/proto.BulletinBoard/GetCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulletinBoardClient) GetBallots(ctx context.Context, in *BallotsRequest, opts ...grpc.CallOption) (BulletinBoard_GetBallotsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BulletinBoard_ServiceDesc.Streams[1], "/proto.BulletinBoard/GetBallots", opts...)
	if err != nil {
		return nil, err
	}
	x := &bulletinBoardGetBallotsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BulletinBoard_GetBallotsClient interface {
	Recv() (*Ballot, error)
	grpc.ClientStream
}

type bulletinBoardGetBallotsClient struct {
	grpc.ClientStream
}

func (x *bulletinBoardGetBallotsClient) Recv() (*Ballot, error) {
	m := new(Ballot)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BulletinBoardServer is the server API for BulletinBoard service.
// All implementations must embed UnimplementedBulletinBoardServer
// for forward compatibility
type BulletinBoardServer interface {
	Setup(context.Context, *SetupRequest) (*SetupReply, error)
	Register(BulletinBoard_RegisterServer) error
	Vote(context.Context, *Ballot) (*VoteReply, error)
	GetParameters(context.Context, *ParameterRequest) (*ParameterReply, error)
	GetCommit(context.Context, *GetCommitRequest) (*Commit, error)
	GetBallots(*BallotsRequest, BulletinBoard_GetBallotsServer) error
	mustEmbedUnimplementedBulletinBoardServer()
}

// UnimplementedBulletinBoardServer must be embedded to have forward compatible implementations.
type UnimplementedBulletinBoardServer struct {
}

func (UnimplementedBulletinBoardServer) Setup(context.Context, *SetupRequest) (*SetupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Setup not implemented")
}
func (UnimplementedBulletinBoardServer) Register(BulletinBoard_RegisterServer) error {
	return status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedBulletinBoardServer) Vote(context.Context, *Ballot) (*VoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (UnimplementedBulletinBoardServer) GetParameters(context.Context, *ParameterRequest) (*ParameterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParameters not implemented")
}
func (UnimplementedBulletinBoardServer) GetCommit(context.Context, *GetCommitRequest) (*Commit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommit not implemented")
}
func (UnimplementedBulletinBoardServer) GetBallots(*BallotsRequest, BulletinBoard_GetBallotsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBallots not implemented")
}
func (UnimplementedBulletinBoardServer) mustEmbedUnimplementedBulletinBoardServer() {}

// UnsafeBulletinBoardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BulletinBoardServer will
// result in compilation errors.
type UnsafeBulletinBoardServer interface {
	mustEmbedUnimplementedBulletinBoardServer()
}

func RegisterBulletinBoardServer(s grpc.ServiceRegistrar, srv BulletinBoardServer) {
	s.RegisterService(&BulletinBoard_ServiceDesc, srv)
}

func _BulletinBoard_Setup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulletinBoardServer).Setup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BulletinBoard/Setup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulletinBoardServer).Setup(ctx, req.(*SetupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BulletinBoard_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BulletinBoardServer).Register(&bulletinBoardRegisterServer{stream})
}

type BulletinBoard_RegisterServer interface {
	SendAndClose(*RegisterReply) error
	Recv() (*Commit, error)
	grpc.ServerStream
}

type bulletinBoardRegisterServer struct {
	grpc.ServerStream
}

func (x *bulletinBoardRegisterServer) SendAndClose(m *RegisterReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bulletinBoardRegisterServer) Recv() (*Commit, error) {
	m := new(Commit)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BulletinBoard_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ballot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulletinBoardServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BulletinBoard/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulletinBoardServer).Vote(ctx, req.(*Ballot))
	}
	return interceptor(ctx, in, info, handler)
}

func _BulletinBoard_GetParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParameterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulletinBoardServer).GetParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BulletinBoard/GetParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulletinBoardServer).GetParameters(ctx, req.(*ParameterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BulletinBoard_GetCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulletinBoardServer).GetCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BulletinBoard/GetCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulletinBoardServer).GetCommit(ctx, req.(*GetCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BulletinBoard_GetBallots_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BallotsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BulletinBoardServer).GetBallots(m, &bulletinBoardGetBallotsServer{stream})
}

type BulletinBoard_GetBallotsServer interface {
	Send(*Ballot) error
	grpc.ServerStream
}

type bulletinBoardGetBallotsServer struct {
	grpc.ServerStream
}

func (x *bulletinBoardGetBallotsServer) Send(m *Ballot) error {
	return x.ServerStream.SendMsg(m)
}

// BulletinBoard_ServiceDesc is the grpc.ServiceDesc for BulletinBoard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BulletinBoard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BulletinBoard",
	HandlerType: (*BulletinBoardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Setup",
			Handler:    _BulletinBoard_Setup_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _BulletinBoard_Vote_Handler,
		},
		{
			MethodName: "GetParameters",
			Handler:    _BulletinBoard_GetParameters_Handler,
		},
		{
			MethodName: "GetCommit",
			Handler:    _BulletinBoard_GetCommit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _BulletinBoard_Register_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetBallots",
			Handler:       _BulletinBoard_GetBallots_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/election.proto",
}

// RegistrarClient is the client API for Registrar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistrarClient interface {
	Register(ctx context.Context, in *Commit, opts ...grpc.CallOption) (*CommitReply, error)
}

type registrarClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistrarClient(cc grpc.ClientConnInterface) RegistrarClient {
	return &registrarClient{cc}
}

func (c *registrarClient) Register(ctx context.Context, in *Commit, opts ...grpc.CallOption) (*CommitReply, error) {
	out := new(CommitReply)
	err := c.cc.Invoke(ctx, "/proto.Registrar/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistrarServer is the server API for Registrar service.
// All implementations must embed UnimplementedRegistrarServer
// for forward compatibility
type RegistrarServer interface {
	Register(context.Context, *Commit) (*CommitReply, error)
	mustEmbedUnimplementedRegistrarServer()
}

// UnimplementedRegistrarServer must be embedded to have forward compatible implementations.
type UnimplementedRegistrarServer struct {
}

func (UnimplementedRegistrarServer) Register(context.Context, *Commit) (*CommitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedRegistrarServer) mustEmbedUnimplementedRegistrarServer() {}

// UnsafeRegistrarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistrarServer will
// result in compilation errors.
type UnsafeRegistrarServer interface {
	mustEmbedUnimplementedRegistrarServer()
}

func RegisterRegistrarServer(s grpc.ServiceRegistrar, srv RegistrarServer) {
	s.RegisterService(&Registrar_ServiceDesc, srv)
}

func _Registrar_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Commit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrarServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Registrar/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrarServer).Register(ctx, req.(*Commit))
	}
	return interceptor(ctx, in, info, handler)
}

// Registrar_ServiceDesc is the grpc.ServiceDesc for Registrar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Registrar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Registrar",
	HandlerType: (*RegistrarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Registrar_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/election.proto",
}

// TallierClient is the client API for Tallier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TallierClient interface {
	Setup(ctx context.Context, in *Keypair, opts ...grpc.CallOption) (*SetupReply, error)
	Tally(ctx context.Context, in *TallyRequest, opts ...grpc.CallOption) (*TallyReply, error)
}

type tallierClient struct {
	cc grpc.ClientConnInterface
}

func NewTallierClient(cc grpc.ClientConnInterface) TallierClient {
	return &tallierClient{cc}
}

func (c *tallierClient) Setup(ctx context.Context, in *Keypair, opts ...grpc.CallOption) (*SetupReply, error) {
	out := new(SetupReply)
	err := c.cc.Invoke(ctx, "/proto.Tallier/Setup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tallierClient) Tally(ctx context.Context, in *TallyRequest, opts ...grpc.CallOption) (*TallyReply, error) {
	out := new(TallyReply)
	err := c.cc.Invoke(ctx, "/proto.Tallier/Tally", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TallierServer is the server API for Tallier service.
// All implementations must embed UnimplementedTallierServer
// for forward compatibility
type TallierServer interface {
	Setup(context.Context, *Keypair) (*SetupReply, error)
	Tally(context.Context, *TallyRequest) (*TallyReply, error)
	mustEmbedUnimplementedTallierServer()
}

// UnimplementedTallierServer must be embedded to have forward compatible implementations.
type UnimplementedTallierServer struct {
}

func (UnimplementedTallierServer) Setup(context.Context, *Keypair) (*SetupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Setup not implemented")
}
func (UnimplementedTallierServer) Tally(context.Context, *TallyRequest) (*TallyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tally not implemented")
}
func (UnimplementedTallierServer) mustEmbedUnimplementedTallierServer() {}

// UnsafeTallierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TallierServer will
// result in compilation errors.
type UnsafeTallierServer interface {
	mustEmbedUnimplementedTallierServer()
}

func RegisterTallierServer(s grpc.ServiceRegistrar, srv TallierServer) {
	s.RegisterService(&Tallier_ServiceDesc, srv)
}

func _Tallier_Setup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Keypair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TallierServer).Setup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Tallier/Setup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TallierServer).Setup(ctx, req.(*Keypair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tallier_Tally_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TallyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TallierServer).Tally(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Tallier/Tally",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TallierServer).Tally(ctx, req.(*TallyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tallier_ServiceDesc is the grpc.ServiceDesc for Tallier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tallier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Tallier",
	HandlerType: (*TallierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Setup",
			Handler:    _Tallier_Setup_Handler,
		},
		{
			MethodName: "Tally",
			Handler:    _Tallier_Tally_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/election.proto",
}

// VotingServerClient is the client API for VotingServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VotingServerClient interface {
	Setup(ctx context.Context, in *Keypair, opts ...grpc.CallOption) (*SetupReply, error)
	Authenticate(ctx context.Context, in *AuthenticationRequest, opts ...grpc.CallOption) (*AuthenticationReply, error)
}

type votingServerClient struct {
	cc grpc.ClientConnInterface
}

func NewVotingServerClient(cc grpc.ClientConnInterface) VotingServerClient {
	return &votingServerClient{cc}
}

func (c *votingServerClient) Setup(ctx context.Context, in *Keypair, opts ...grpc.CallOption) (*SetupReply, error) {
	out := new(SetupReply)
	err := c.cc.Invoke(ctx, "/proto.VotingServer/Setup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServerClient) Authenticate(ctx context.Context, in *AuthenticationRequest, opts ...grpc.CallOption) (*AuthenticationReply, error) {
	out := new(AuthenticationReply)
	err := c.cc.Invoke(ctx, "/proto.VotingServer/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VotingServerServer is the server API for VotingServer service.
// All implementations must embed UnimplementedVotingServerServer
// for forward compatibility
type VotingServerServer interface {
	Setup(context.Context, *Keypair) (*SetupReply, error)
	Authenticate(context.Context, *AuthenticationRequest) (*AuthenticationReply, error)
	mustEmbedUnimplementedVotingServerServer()
}

// UnimplementedVotingServerServer must be embedded to have forward compatible implementations.
type UnimplementedVotingServerServer struct {
}

func (UnimplementedVotingServerServer) Setup(context.Context, *Keypair) (*SetupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Setup not implemented")
}
func (UnimplementedVotingServerServer) Authenticate(context.Context, *AuthenticationRequest) (*AuthenticationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedVotingServerServer) mustEmbedUnimplementedVotingServerServer() {}

// UnsafeVotingServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VotingServerServer will
// result in compilation errors.
type UnsafeVotingServerServer interface {
	mustEmbedUnimplementedVotingServerServer()
}

func RegisterVotingServerServer(s grpc.ServiceRegistrar, srv VotingServerServer) {
	s.RegisterService(&VotingServer_ServiceDesc, srv)
}

func _VotingServer_Setup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Keypair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServerServer).Setup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VotingServer/Setup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServerServer).Setup(ctx, req.(*Keypair))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingServer_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServerServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VotingServer/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServerServer).Authenticate(ctx, req.(*AuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VotingServer_ServiceDesc is the grpc.ServiceDesc for VotingServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VotingServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.VotingServer",
	HandlerType: (*VotingServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Setup",
			Handler:    _VotingServer_Setup_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _VotingServer_Authenticate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/election.proto",
}
